@mixin contextual-colors(
  $props: ('background-color', 'color', 'border-color'),
  $named-colors: var-get('color'),
  $selector: &,
  $baseSelector: &,
) {
  $light: map-get($named-colors, 'light') or '#fff';
  $dark: map-get($named-colors, 'dark') or '#000';

  @each $name, $value in $named-colors {
    $s: selector-append('#{$baseSelector}--#{$name}', $selector);
    $var-value: $value;

    &#{$s} {
      $background-color: null;
      $color: null;

      @if index($props, 'color') != null and index($props, 'background-color') != null {
        $inverted: map-get(var-get('inverse'), $name);

        @if $name != 'light' and $name != 'dark' {
          $background-color: $var-value;
        }

        @if $inverted != null {
          $color: var-get('inverse#{string-capitalize($name)}');
        } @else {
          $color: $dark;
        }
      }

      @each $prop in $props {
        @if ($prop == 'background-color' and $background-color != null) {
          background-color: $background-color;
        } @else if ($prop == 'color' and $color == null) {
          $color: $var-value;
        } @else {
          #{$prop}: $var-value;
        }
      }

      @if $color != null {
        color: $color;
      }
      @content;
    }
  }
}

@mixin contextual-component {
  @include contextual-colors();

  &:hover,
  &:visited {
    filter: brightness(calc(100% - #{var-get('linkHoverContrast')}));
    text-decoration: none;
  }

  &--outline {
    background-color: var-get('colorLight');
    &:hover,
    &:visited {
      filter: none;
    }
  }
}
