@mixin contextual-colors(
  $props: ('background-color', 'color', 'border-color'),
  $named-colors: $context-colors,
  $threshold: $context-threshold,
  $selector: &
) {
  $light: map-get($named-colors, 'light') or '#fff';
  $dark: map-get($named-colors, 'dark') or '#000';

  @each $name, $value in $named-colors {
    $s: selector-append('#{&}--#{$name}', $selector);
    &#{$s} {
      $background-color: null;
      $color: null;
      @if index($props, 'color') != null and index($props, 'background-color') != null {
        @if $name != 'light' and $name != 'dark' {
          $background-color: $value;
        }
        @if (color-contrast($value, $threshold)) {
          $color: $light;
        } @else {
          $color: $dark;
        }
      }

      @each $prop in $props {
        @if ($prop == 'background-color' and $background-color != null) {
          background-color: $background-color;
        } @else if ($prop == 'color' and $color == null) {
          $color: $value;
        } @else {
          #{$prop}: $value;
        }
      }

      @if $color != null {
        color: $color;
        /*a {
          color: inherit;

          &.is-active,
          &:visited,
          &:hover,
          &:focus {
            filter: brightness(#{100% - $link-hover-contrast});
          }
        }*/
      }
      @content;
    }
  }
}

@mixin contextual-component {
  @include contextual-colors();

  &:hover,
  &:visited {
    filter: brightness(#{100% - $link-hover-contrast});
    text-decoration: none;
  }

  &--outline {
    background-color: $white;
    &:hover,
    &:visited {
      filter: none;
    }
  }
}
